generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String?
  lastName       String?
  name           String?
  email          String? @unique
  phone          String?
  ordersCount    Int?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  emailVerified  DateTime?
  accounts       Account[]
  addresses      Addresses[]
  orders         Order[]
  image          String?
  role           Role      @default(USER)
  reviews Review[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  userId            String  @db.ObjectId
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Product {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  available             Boolean
  collections           Collection[]
  comparePriceAt        Int
  createdAt             DateTime @default(now())
  description           String
  images                Image[]
  options               ProductOptions[]
  price                 Int
  productCategory       String
  productType           String
  requiresShipping      Boolean
  sku                   String
  status                String
  taxable               Boolean
  title                 String
  totalInventory        Int
  totalVariants         Int
  weight                Int
  weightUnit            String
  variants              Variant[]
  reviews Review[]
}

model Variant {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  price             Int
  comparePriceAt    Int
  available         Boolean
  featuredImage     Image?
  images            Image[]
  requiresShipping  Boolean
  sku               String
  weight            Int
  weightUnit        String
  inventoryQuantity Int
  createdAt             DateTime @default(now())
  parentId          String  @db.ObjectId
  product           Product? @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model Order {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime @default(now())
  billingAddress    Addresses?
  email             String
  fulfillmentStatus FulfillmentStatusLabel? @default(UNFULFILLED)
  paymentStatus        String
  itemCount         Int
  shippingAddress   Addresses?
  shippingPrice     Int
  subtotalPrice     Int
  currency          String
  taxPrice          Int
  totalDiscounts    Int
  totalPrice        Float
  deliveryStatus    String
  products CartProductType[]
   paymentIntentId   String @unique
  userId            String @db.ObjectId
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type ProductOptions {
  name      String
}

type Collection {
  id                   Int
  title                String
  allProductsCount     Int
  allTypes             String[]
  description          String
  featuredImage        Image
  createdAt            DateTime  @default(now())
}

type Addresses {
  line1          String
  line2          String?
  city              String
  country           String
  countryCode       String?
  postal_code String
  state String
  firstName         String?
  lastName          String?
  fullName          String?
  phone             String?
  street            String?
  userId            String
}

model Review{
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  productId String @db.ObjectId
  rating Int
  comment String
  createdDate DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}

type Image {
  key              String
  name             String
  url              String
  size             Int
  serverData       ServerData
}

type ServerData {
  uploadedBy String    
}

type CartProductType  {
  id String
  title String
  decription String
  images Image[]
  options ProductOptions[]
  productCategory String
  productType String
  quantity Int
  price Int
  variant Json
}

enum Role {
  USER
  ADMIN
}

enum FulfillmentStatusLabel {
  COMPLETE  
  FULFILLED
  PARTIAL
  RESTOCKED
  UNFULFILLED 
}













